// Generated by listgen. DO NOT EDIT.
// Command: listgen -package catena -list-type metriclist -value-type *memoryMetric -cmp "if a.name < b.name {return -1}; if a.name > b.name {return 1}; return 0;"

package catena

import (
	"errors"
	"fmt"
	"sync/atomic"
	"unsafe"
)

var (
	ErrmetriclistValueExists   = errors.New("catena (metriclist): value exists")
	ErrmetriclistValueNotFound = errors.New("catena (metriclist): value does not exist")
)

type metriclist struct {
	head unsafe.Pointer
	size int32
}

type metriclistNode struct {
	val  *memoryMetric
	next unsafe.Pointer
}

type metriclistIterator struct {
	list    *metriclist
	current *metriclistNode
	valid   bool
}

func metriclistCmp(a, b *memoryMetric) int {
	if a.name < b.name {
		return -1
	}
	if a.name > b.name {
		return 1
	}
	return 0
}

// NewList returns a lock-free ordered list with values of type *memoryMetric.
func Newmetriclist() *metriclist {
	return &metriclist{}
}

// Insert inserts v into the list in order. An error is returned if v is already present.
func (l *metriclist) Insert(v *memoryMetric) error {
	n := &metriclistNode{
		val:  v,
		next: nil,
	}

HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		atomic.AddInt32(&l.size, 1)
		return nil
	}

	headNode := (*metriclistNode)(headPtr)
	if metriclistCmp(headNode.val, n.val) > 0 {
		n.next = headPtr
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, unsafe.Pointer(n)) {
			goto HEAD
		}

		atomic.AddInt32(&l.size, 1)
		return nil
	}

	if metriclistCmp(headNode.val, n.val) == 0 {
		return ErrmetriclistValueExists
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		atomic.AddInt32(&l.size, 1)
		return nil
	}

	nextNode := (*metriclistNode)(nextPtr)
	if metriclistCmp(nextNode.val, n.val) > 0 {
		n.next = nextPtr
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, unsafe.Pointer(n)) {
			goto NEXT
		}

		atomic.AddInt32(&l.size, 1)
		return nil
	}

	if metriclistCmp(nextNode.val, n.val) == 0 {
		return ErrmetriclistValueExists
	}

	headNode = nextNode
	goto NEXT
}

// Remove removes v from the list. An error is returned if v is not present.
func (l *metriclist) Remove(v *memoryMetric) error {
HEAD:
	headPtr := atomic.LoadPointer(&l.head)

	if headPtr == nil {
		return ErrmetriclistValueNotFound
	}

	headNode := (*metriclistNode)(headPtr)

	if metriclistCmp(headNode.val, v) == 0 {
		nextPtr := atomic.LoadPointer(&headNode.next)
		if !atomic.CompareAndSwapPointer(&l.head, headPtr, nextPtr) {
			goto HEAD
		}

		atomic.AddInt32(&l.size, -1)
		return nil
	}

NEXT:
	nextPtr := atomic.LoadPointer(&headNode.next)
	if nextPtr == nil {
		return ErrmetriclistValueNotFound
	}

	nextNode := (*metriclistNode)(nextPtr)

	if metriclistCmp(nextNode.val, v) > 0 {
		return ErrmetriclistValueNotFound
	}

	if metriclistCmp(nextNode.val, v) == 0 {
		replacementPtr := atomic.LoadPointer(&nextNode.next)
		if !atomic.CompareAndSwapPointer(&headNode.next, nextPtr, replacementPtr) {
			goto NEXT
		}

		atomic.AddInt32(&l.size, -1)
		return nil
	}

	headNode = nextNode
	goto NEXT
}

// Size returns the number of elements currently in the list.
func (l *metriclist) Size() int {
	return int(atomic.LoadInt32(&l.size))
}

// NewIterator returns a new iterator. Values can be read
// after Next is called.
func (l *metriclist) NewIterator() *metriclistIterator {
	return &metriclistIterator{
		list:  l,
		valid: true,
	}
}

// Next positions the iterator at the next node in the list.
// Next will be positioned at the head on the first call.
// The return value will be true if a value can be read from the list.
func (i *metriclistIterator) Next() bool {
	if !i.valid {
		return false
	}

	if i.current == nil {
		if i.list.head == nil {
			i.valid = false
			return false
		}

		i.current = (*metriclistNode)(i.list.head)
		return true
	}

	i.current = (*metriclistNode)(i.current.next)

	i.valid = i.current != nil
	return i.valid
}

// Value reads the value from the current node of the iterator.
// An error is returned if a value cannot be retrieved.
func (i *metriclistIterator) Value() (*memoryMetric, error) {
	var v *memoryMetric

	if i.current == nil {
		return v, ErrmetriclistValueNotFound
	}

	return i.current.val, nil
}

// String returns the string representation of the list.
func (l *metriclist) String() string {
	output := ""

	if l.head == nil {
		return output
	}

	i := l.NewIterator()

	for i.Next() {
		v, _ := i.Value()
		output += fmt.Sprintf("%v ", v)
	}

	return output
}
